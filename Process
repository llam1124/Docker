Problems before the Docker-era
  - Compatibility issues of multiple services and versions of operating system.
  - Also compatibility between services and the libraries versions of dependencies
  - Long setup time of development environment
  - Different results from different environment
  
 How Docker fix this
  - Each component of the application has its own separate container with its OWN libraries and its OWN dependencies
  - Container:
    => An isolated environment that has their own processes, services, networking interfaces, and mounts under the same operating system kernel unlike virtual machines (VM)
  - Purpose is to CONTAINERIZE applications, SHIP them, and RUN them

## Install Docker and Getting Started
# Install Docker CE (Community Edition) from https://docs.docker.com. Follow directions on installing it
https://docs.docker.com/install/linux/docker-ce/ubuntu/#os-requirements

#Check to make sure what version of the OS I'm running on. In this case Ubuntu 16.04.03 LTS
cat /etc/*release*

# Installed using the Repository option

# Test to see if installation is successful by running "docker" command and then running hello-world image step
docker run hello-world
Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
9bb5a5d4561a: Pull complete 
Digest: sha256:f5233545e43561214ca4891fd1157e1c3c563316ed8e237750d59bde73361e77
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

# Now trying to test with Ubuntu image
docker run -it ubuntu bash
Unable to find image 'ubuntu:latest' locally
latest: Pulling from library/ubuntu
6b98dfc16071: Pull complete 
4001a1209541: Pull complete 
6319fc68c576: Pull complete 
b24603670dc3: Pull complete 
97f170c87c6f: Pull complete 
Digest: sha256:5f4bdc3467537cbbe563e80db2c3ec95d548a9145d64453b06939c4592d67b6d
Status: Downloaded newer image for ubuntu:latest
root@4ce95a1e7222:/# 

The numbers after root@ is the container id

## Docker Commands

docker run   = run container of an image
docker ps    = lists all running containers and basic information about them
docker ps -a = outputs all running and previously exceeded containers 
docker stop <container-id or Name> = stops the container
docker rm <container-id or Name> = removes container permanetely
docker images = list of images downloaded from Docker Hub
docker rmi <image> = remove image from saved images
docker pull = pull image
docker exec <container name> cat <file or directory> = list content of the file in the target container
docker run -d <container> sleep # = runs an empty container in the background(detach) for x amount of seconds before it shut down
docker run -v <external directory>:<container directory> <image> = stores the data from container in case you want to persist data after the container is deleted. Else all data would be gone
docker attach <container-id> = brings container back to the foreground
docker inspect <container-id> = (used for jenkins) inspected properties of that container
docker run -p 8080:8080 <image> = port mapping to for external access to web server
docker run -p 8080:8080 -v <host data directory>:<image container directory> -u root <image> = uses same data across containers that is saved in host
docker build Dockerfile -t <dockerfile> = builds layers of the container
docker history <dockerfile> = see history of changes made to dockerfile and sizes
docker network ls = list all available networks
docker start -ai <container-id> = start up previous containers by attaching and interacting

## Dockerfile 
INSTRUCTION ARGUMENT
FROM <image>   ==> Start from a base OS or another image
RUN <commands> ==> Install all dependencies
COPY <code>    ==> Copy source code
ENTRYPOINT <entrypoint> ==> Specify entrypoint

## Options
-d = detach
-i = interactive
-a = all
-p = port
-v = volume mapping
-u = user
-t = tag

## Demo:
# Building a Dockerfile with Simple Flask-App
  docker run ps                ==> Check for any running containers
  docker run -it ubuntu bash   ==> Create a ubuntu container and do something in terminal
    apt-get install -y python  ==> Install python within ubuntu container
    apt-get update             ==> Got an error, update repo first
    apt-get install -y python  ==> Try downloading python again
    python                     ==> Check python version
    exit()                     ==> Exit python 
    pip install flask          ==> Install flask
    apt-get install python-pip ==> Install pip if not available
    cat > /opt/app.py          ==> Create the code for app (write code then ctrl+C when done)
    cd /opt
    FLASK_APP=app.py flask run --host=0.0.0.0 ==> Get the flask app running
    docker inpect <container id> ==> Find what the ip address for current container
    ipaddress:5000             ==> Where the flask app is running
    Ctrl+C                     ==> return to host/docker
    mkdir <dir name>           ==> Start to containerize
    cd <dir name>              ==> Be in the directory
    cat > Dockerfile           ==> Create dockerfile
    cat > app.py               ==> Create the source code for the container
    docker build .             ==> Build layers for the image
    docker build . -t <dockerhub acc name>/my-simple-webapp ==> Builds the layers image and tagging it with a unique name and the acc repository
    docker push <custom docker image> ==> pushes new image to your repository
    docker login               ==> login to your docker hub if reaching in permission denied issue
    
## Creating a Docker Compose File (container with more than one services)
  docker-compose.yml (Uses YAML to define)
  
  services:     ==> Name of dictionary
  
    web:        ==> list item #1
      image: "llambo/my-simple-webapp"  ==> specifications
      ports:
          - "80:5000"   ==> port mapping
      deploy:
          replicas: 5 ==> require 5 nodes
          
    database:   ==> list item #2
      image: "mysql"
      volumes:
          - /opt/data:/var/lib/mysql
      environment:
          - MYSQL_ROOT_PASSWORD=password
    
 This is for when in production server, you dont want to be using docker run command
 docker-compose up     ==> bring up the container
 docker-compose stop   ==> stop all container
 docker-compose down   ==> stop all container and remove them entirely
 
 ## Docker SWARM
  a cluster of docker hosts where one is designated as the manager and the others as workers
  
  docker swarm init ==> initialize the target host to be manager
  docker swarm join --token <token> ==> to join the cluster with the generated token by the manager

## Docker Networking
when docker is installed, it automatically creates networks: Bridge, none, and host
Bridge = private and internal for each containers

by default, docker host only has one internal network that can be accessed by the containers of that host. 
To create another internal network wihtin the host
  docker network create \
    --driver bridge \
    --subnet 182.18.0.0/16
    custom-isolated-network
    
## Re-configure Port Mapping of an Existing Container
You can change the port mapping by directly editing the hostconfig.json file at /var/lib/docker/containers/[hash_of_the_container]/hostconfig.json
You can determine the [hash_of_the_container] via the docker inspect <container_name> command and the value of the "Id" field is the hash. 
1) stop the container 
2) change the file
3) restart your docker engine (to flush/clear config caches) [service docker restart]
4) start the container
